(this["webpackJsonphtml-tablesorter"]=this["webpackJsonphtml-tablesorter"]||[]).push([[0],{16:function(e,n,t){e.exports=t(26)},26:function(e,n,t){"use strict";t.r(n);var l=t(0),o=t.n(l),a=t(13),r=t.n(a);var c=function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement("pre",{style:{wordWrap:"break-word",whiteSpace:"pre-wrap"}},"     \nconsole.log('hello world')\nconst columnData = [];\nconst dictOfColumnIndexAndTableRow = {\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", function (e) {\n    console.log('dom loaded')\nfor (let sortableTable of document.getElementsByTagName('table')) {\n    if (sortableTable.className === 'table-sort') {\n        console.log('table-sort')\n    if (!sortableTable.getElementsByTagName('thead')) {\n        console.log('<thead> Tag does not exist in table');\n    }\n    else if (!sortableTable.getElementsByTagName('tbody')) {\n        console.log('<tbody> Tag does not exist in table');\n    }\n    else {\n        const tableHead = sortableTable.querySelector('thead')\n        const tableBody = sortableTable.querySelector('tbody')\n        const tableHeadHeaders = tableHead.querySelectorAll('th')\n        \n        for (let [columnIndex, th] of tableHeadHeaders.entries('table')) {\n            console.log('th')\n        let timesClickedColumn = 0\n        th.addEventListener(\"click\", function () {\n            timesClickedColumn += 1\n            console.log('clicked')\n            function getTableDataOnClick() {\n            const tableRows = tableBody.querySelectorAll('tr');\n            for (let [i, tr] of tableRows.entries()) {\n                if (tr.querySelectorAll('td').item(columnIndex).innerHTML !== ''){\n                columnData.push(tr.querySelectorAll('td').item(columnIndex).innerHTML+'#'+i)\n                dictOfColumnIndexAndTableRow[tr.querySelectorAll('td').item(columnIndex).innerHTML+'#'+i] = tr.innerHTML\n                } else{\n                // Fill in blank table cells with a value(0), so they can be sorted.\n                columnData.push('0#'+i)\n                dictOfColumnIndexAndTableRow['0#'+i] = tr.innerHTML\n                console.log(dictOfColumnIndexAndTableRow)\n                }\n            }\n\n            function naturalSortAescending(a,b){\n                console.log('sort1')\n                return a.localeCompare(b, navigator.languages[0] || navigator.language,\n                    {numeric: true, ignorePunctuation: true})\n            }\n            function naturalSortDescending(a,b){\n                console.log('sort2')\n                return naturalSortAescending(b,a)\n            }\n            // Sort naturally; default aescending unless th is using 'order-by-desc' as className.\n            console.log(columnData[0])\n            //[^A-Za-z0-9s]\n\n            if (columnData[0].search(/[^A-Za-z0-9s]/)) {\n                console.log('test1')\n                if (th.className === 'order-by-desc' && timesClickedColumn === 1){\n                columnData.sort(naturalSortDescending,{numeric: true, ignorePunctuation: true})\n                }else if(th.className === 'order-by-desc' && timesClickedColumn === 2){\n                columnData.sort(naturalSortAescending,{numeric: true, ignorePunctuation: true})\n                    timesClickedColumn = 0\n                }\n            else if (timesClickedColumn === 1){   \n                console.log('1')  \n                columnData.sort(naturalSortAescending)         \n            } else if (timesClickedColumn === 2){\n                \n                columnData.sort(naturalSortDescending)\n                timesClickedColumn = 0\n                } \n            }\n            }\n            getTableDataOnClick();\n            function sortingFunction() {\n            const tableRows = tableBody.querySelectorAll('tr');\n            for (let [i, tr] of tableRows.entries()) {\n           \n                tr.innerHTML = dictOfColumnIndexAndTableRow[columnData[i]]\n            }\n            columnData.length = 0\n            }\n            sortingFunction()\n        });\n        }\n    }\n    }\n}\n})\n"))},s=t(14),i=t(1);r.a.render(o.a.createElement(s.a,null,o.a.createElement(i.a,{exact:!0,path:"/.js",component:c},o.a.createElement(c,null)),o.a.createElement(i.a,{exact:!0,path:"/",component:c},o.a.createElement(c,null))),document.getElementById("display"))}},[[16,1,2]]]);
//# sourceMappingURL=main.0668a81a.chunk.js.map