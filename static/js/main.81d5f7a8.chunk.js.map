{"version":3,"sources":["TableSortScript.js","index.js"],"names":["TableSortScript","Fragment","style","wordWrap","whiteSpace","ReactDOM","render","exact","path","component","DisplayTableSort","document","getElementById"],"mappings":"2MAwGeA,MAtGf,WACI,OAAS,kBAAC,IAAMC,SAAP,KAAgB,yBAAKC,MAAO,CAACC,SAAU,aAAcC,WAAY,aAAjD,uvH,eCI7BC,IAASC,OAET,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,OAAOC,UAAWC,GACpC,kBAAC,EAAD,OAGA,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,IAAIC,UAAWC,GACjC,kBAAC,EAAD,QAGEC,SAASC,eAAe,c","file":"static/js/main.81d5f7a8.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\n\r\nfunction TableSortScript() {\r\n    return ( <React.Fragment><pre style={{wordWrap: \"break-word\", whiteSpace: \"pre-wrap\"}}>\r\n        \r\n{`\r\n/* \r\ntable-sort-js\r\nLee Wannacott 2020\r\n*/\r\n\r\nconsole.log('hello world')\r\nconst columnData = [];\r\nconst dictOfColumnIndexAndTableRow = {\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function (e) {\r\n    console.log('dom loaded')\r\nfor (let sortableTable of document.getElementsByTagName('table')) {\r\n    if (sortableTable.className === 'table-sort') {\r\n        console.log('table-sort')\r\n    if (!sortableTable.getElementsByTagName('thead')) {\r\n        console.log('<thead> Tag does not exist in table');\r\n    }\r\n    else if (!sortableTable.getElementsByTagName('tbody')) {\r\n        console.log('<tbody> Tag does not exist in table');\r\n    }\r\n    else {\r\n        const tableHead = sortableTable.querySelector('thead')\r\n        const tableBody = sortableTable.querySelector('tbody')\r\n        const tableHeadHeaders = tableHead.querySelectorAll('th')\r\n        \r\n        for (let [columnIndex, th] of tableHeadHeaders.entries('table')) {\r\n            console.log('th')\r\n        let timesClickedColumn = 0\r\n        th.addEventListener(\"click\", function () {\r\n            timesClickedColumn += 1\r\n            console.log('clicked')\r\n            function getTableDataOnClick() {\r\n            const tableRows = tableBody.querySelectorAll('tr');\r\n            for (let [i, tr] of tableRows.entries()) {\r\n                if (tr.querySelectorAll('td').item(columnIndex).innerHTML !== ''){\r\n                columnData.push(tr.querySelectorAll('td').item(columnIndex).innerHTML+'#'+i)\r\n                dictOfColumnIndexAndTableRow[tr.querySelectorAll('td').item(columnIndex).innerHTML+'#'+i] = tr.innerHTML\r\n                } else{\r\n                // Fill in blank table cells with a value(0), so they can be sorted.\r\n                columnData.push('0#'+i)\r\n                dictOfColumnIndexAndTableRow['0#'+i] = tr.innerHTML\r\n                console.log(dictOfColumnIndexAndTableRow)\r\n                }\r\n            }\r\n\r\n            function naturalSortAescending(a,b){\r\n                console.log('sort1')\r\n                return a.localeCompare(b, navigator.languages[0] || navigator.language,\r\n                    {numeric: true, ignorePunctuation: true})\r\n            }\r\n            function naturalSortDescending(a,b){\r\n                console.log('sort2')\r\n                return naturalSortAescending(b,a)\r\n            }\r\n            // Sort naturally; default aescending unless th is using 'order-by-desc' as className.\r\n            console.log(columnData[0])\r\n            //[^A-Za-z0-9\\s]\r\n\r\n            if (columnData[0].search(/[^A-Za-z0-9\\s]/)) {\r\n                console.log('test1')\r\n                if (th.className === 'order-by-desc' && timesClickedColumn === 1){\r\n                columnData.sort(naturalSortDescending,{numeric: true, ignorePunctuation: true})\r\n                }else if(th.className === 'order-by-desc' && timesClickedColumn === 2){\r\n                columnData.sort(naturalSortAescending,{numeric: true, ignorePunctuation: true})\r\n                    timesClickedColumn = 0\r\n                }\r\n            else if (timesClickedColumn === 1){   \r\n                console.log('1')  \r\n                columnData.sort(naturalSortAescending)         \r\n            } else if (timesClickedColumn === 2){\r\n                \r\n                columnData.sort(naturalSortDescending)\r\n                timesClickedColumn = 0\r\n                } \r\n            }\r\n            }\r\n            getTableDataOnClick();\r\n            function sortingFunction() {\r\n            const tableRows = tableBody.querySelectorAll('tr');\r\n            for (let [i, tr] of tableRows.entries()) {\r\n           \r\n                tr.innerHTML = dictOfColumnIndexAndTableRow[columnData[i]]\r\n            }\r\n            columnData.length = 0\r\n            }\r\n            sortingFunction()\r\n        });\r\n        }\r\n    }\r\n    }\r\n}\r\n})\r\n`}\r\n    </pre></React.Fragment>\r\n    );\r\n}\r\n\r\nexport default TableSortScript","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import App from './table-sort';\n// import TestTable from './TestTable'\nimport DisplayTableSort from './TableSortScript';\nimport { HashRouter, BrowserRouter ,Route } from \"react-router-dom\";\n\nReactDOM.render(\n\n<HashRouter>\n<Route exact path=\"/.js\" component={DisplayTableSort}>\n<DisplayTableSort/>\n</Route>\n\n<Route exact path=\"/\" component={DisplayTableSort}>\n<DisplayTableSort/>\n</Route>\n</HashRouter>,\n  document.getElementById('display')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}