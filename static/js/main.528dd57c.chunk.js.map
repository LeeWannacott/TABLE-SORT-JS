{"version":3,"sources":["logo.svg","table-sort.js","TestTable.js","TableSortScript.js","index.js"],"names":["module","exports","tableSortJs","console","log","columnData","dictOfColumnIndexAndTableRow","document","getElementsByTagName","sortableTable","className","tableHead","querySelector","tableBody","tableHeadHeaders","querySelectorAll","entries","columnIndex","th","timesClickedColumn","addEventListener","tableRows","i","tr","item","innerHTML","push","naturalSortAescending","a","b","localeCompare","navigator","languages","language","numeric","ignorePunctuation","naturalSortDescending","search","sort","getTableDataOnClick","length","sortingFunction","readyState","e","App","id","TableSortScript","ReactDOM","render","exact","path","component","TestTable","getElementById"],"mappings":"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","file":"static/js/main.528dd57c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/* \r\ntable-sort-js\r\nLee Wannacott 2020\r\n*/\r\nfunction tableSortJs(){\r\nconsole.log('hello world')\r\nconst columnData = [];\r\nconst dictOfColumnIndexAndTableRow = {\r\n}\r\n    console.log('dom loaded')\r\nfor (let sortableTable of document.getElementsByTagName('table')) {\r\n    if (sortableTable.className === 'table-sort') {\r\n        console.log('table-sort')\r\n    if (!sortableTable.getElementsByTagName('thead')) {\r\n        console.log('<thead> Tag does not exist in table');\r\n    }\r\n    else if (!sortableTable.getElementsByTagName('tbody')) {\r\n        console.log('<tbody> Tag does not exist in table');\r\n    }\r\n    else {\r\n        const tableHead = sortableTable.querySelector('thead')\r\n        const tableBody = sortableTable.querySelector('tbody')\r\n        const tableHeadHeaders = tableHead.querySelectorAll('th')\r\n        \r\n        for (let [columnIndex, th] of tableHeadHeaders.entries('table')) {\r\n            console.log('th')\r\n        let timesClickedColumn = 0\r\n        th.addEventListener(\"click\", function () {\r\n            timesClickedColumn += 1\r\n            console.log('clicked')\r\n            function getTableDataOnClick() {\r\n            const tableRows = tableBody.querySelectorAll('tr');\r\n            for (let [i, tr] of tableRows.entries()) {\r\n                if (tr.querySelectorAll('td').item(columnIndex).innerHTML !== ''){\r\n                columnData.push(tr.querySelectorAll('td').item(columnIndex).innerHTML+'#'+i)\r\n                dictOfColumnIndexAndTableRow[tr.querySelectorAll('td').item(columnIndex).innerHTML+'#'+i] = tr.innerHTML\r\n                } else{\r\n                // Fill in blank table cells with a value(0), so they can be sorted.\r\n                columnData.push('0#'+i)\r\n                dictOfColumnIndexAndTableRow['0#'+i] = tr.innerHTML\r\n                }\r\n            }\r\n\r\n            function naturalSortAescending(a,b){\r\n                return a.localeCompare(b, navigator.languages[0] || navigator.language,\r\n                    {numeric: true, ignorePunctuation: true})\r\n            }\r\n            function naturalSortDescending(a,b){\r\n                return naturalSortAescending(b,a)\r\n            }\r\n            // Sort naturally; default aescending unless th is using 'order-by-desc' as className.\r\n            console.log(columnData[0])\r\n            //[^A-Za-z0-9s]\r\n\r\n            if (columnData[0].search(/[^A-Za-z0-9s]/)) {\r\n                console.log('test1')\r\n                if (th.className === 'order-by-desc' && timesClickedColumn === 1){\r\n                columnData.sort(naturalSortDescending,{numeric: true, ignorePunctuation: true})\r\n                }else if(th.className === 'order-by-desc' && timesClickedColumn === 2){\r\n                columnData.sort(naturalSortAescending,{numeric: true, ignorePunctuation: true})\r\n                    timesClickedColumn = 0\r\n                }\r\n            else if (timesClickedColumn === 1){   \r\n                columnData.sort(naturalSortAescending)         \r\n            } else if (timesClickedColumn === 2){\r\n                \r\n                columnData.sort(naturalSortDescending)\r\n                timesClickedColumn = 0\r\n                } \r\n            }\r\n            }\r\n            getTableDataOnClick();\r\n            function sortingFunction() {\r\n            const tableRows = tableBody.querySelectorAll('tr');\r\n            for (let [i, tr] of tableRows.entries()) {\r\n           \r\n                tr.innerHTML = dictOfColumnIndexAndTableRow[columnData[i]]\r\n            }\r\n            columnData.length = 0\r\n            }\r\n            sortingFunction()\r\n        });\r\n        }\r\n    }\r\n    }\r\n}\r\n}\r\n\r\nif(document.readyState === 'loading' || document.readyState === 'interactive'){\r\n    document.addEventListener(\"DOMContentLoaded\", function (e) {\r\n        console.log('loading')\r\n    tableSortJs()\r\n    })\r\n}else if(document.readyState === 'complete'){\r\n    console.log('complete')\r\n    tableSortJs()\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\n// works:\r\nimport './table-sort'\r\n\r\nfunction App() {\r\n\r\n\r\n// React.useEffect(() => {\r\n//   const script = document.createElement(\"script\");\r\n//   script.src = \"https://leewannacott.github.io/table-sort-js/TableSortScript.js\";\r\n//   script.async = true;\r\n//   document.body.appendChild(script); \r\n//   }, []);\r\n  \r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n      </header>\r\n      <table id=\"myTable\" className=\"table-sort\">\r\n        <thead>\r\n          <tr>\r\n            <th>Last Name</th>\r\n            <th>First Name</th>\r\n            <th>Email</th>\r\n            <th className='order-by-desc'>Due</th>\r\n            <th>Web Site</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>Smith</td>\r\n            <td>John</td>\r\n            <td>jsmith@gmail.com</td>\r\n            <td>2234</td>\r\n            <td>http://www.jsmith.com</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Bach</td>\r\n            <td>Frank</td>\r\n            <td>fbach@yahoo.com</td>\r\n            <td>1.6</td>\r\n            <td>http://www.frank.com</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Doe</td>\r\n            <td>Jason</td>\r\n            <td>jdoe@hotmail.com</td>\r\n            <td>1,234,567,8,89</td>\r\n            <td>http://www.jdoe.com</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Conway</td>\r\n            <td>Tim</td>\r\n            <td>tconway@earthlink.net</td>\r\n            <td>1.234.567.8,90</td>\r\n            <td>http://www.timconway.com</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Conway</td>\r\n            <td>T</td>\r\n            <td>t.net</td>\r\n            <td>1,234,567,8,91</td>\r\n            <td>http://www.ti.com</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n      \r\n\r\n      <table id=\"myTable\" className=\"table-sort\">\r\n        <thead>\r\n          <tr>\r\n            <th>Last Name</th>\r\n            <th>First Name</th>\r\n            <th>Email</th>\r\n            <th className ='order-by-desc'>Due</th>\r\n            <th>Web Site</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>2</td>\r\n            <td>John</td>\r\n            <td>jsmith@gmail.com</td>\r\n            <td>2020-11-28</td>\r\n            <td>http://www.jsmith.com</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Bach</td>\r\n            <td></td>\r\n            <td>fbach@yahoo.com</td>\r\n            <td></td>\r\n            <td>http://www.frank.com</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Doe</td>\r\n            <td>Jason</td>\r\n            <td>jdoe@hotmail.com</td>\r\n            <td>2020-11-25</td>\r\n            <td>http://www.jdoe.com</td>\r\n          </tr>\r\n          <tr>\r\n            <td>t</td>\r\n            <td>Tim</td>\r\n            <td>tconway@earthlink.net</td>\r\n            <td>1</td>\r\n            <td>http://www.timconway.com</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Conway</td>\r\n            <td>T</td>\r\n            <td>t.net</td>\r\n            <td>2020-11-13</td>\r\n            <td>http://www.ti.com</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React, { Fragment } from 'react';\r\n\r\nfunction TableSortScript() {\r\n    return ( <React.Fragment><pre style={{wordWrap: \"break-word\", whiteSpace: \"pre-wrap\"}}>\r\n        \r\n{`\r\n//d\r\n/* \r\ntable-sort-js\r\nLee Wannacott 2020\r\n*/\r\n\r\nfunction tableSortJs(){\r\n    console.log('hello world')\r\n    const columnData = [];\r\n    const dictOfColumnIndexAndTableRow = {\r\n    }\r\n    \r\n    document.addEventListener(\"DOMContentLoaded\", function (e) {\r\n        console.log('dom loaded')\r\n    for (let sortableTable of document.getElementsByTagName('table')) {\r\n        if (sortableTable.className === 'table-sort') {\r\n            console.log('table-sort')\r\n        if (!sortableTable.getElementsByTagName('thead')) {\r\n            console.log('<thead> Tag does not exist in table');\r\n        }\r\n        else if (!sortableTable.getElementsByTagName('tbody')) {\r\n            console.log('<tbody> Tag does not exist in table');\r\n        }\r\n        else {\r\n            const tableHead = sortableTable.querySelector('thead')\r\n            const tableBody = sortableTable.querySelector('tbody')\r\n            const tableHeadHeaders = tableHead.querySelectorAll('th')\r\n            \r\n            for (let [columnIndex, th] of tableHeadHeaders.entries('table')) {\r\n                console.log('th')\r\n            let timesClickedColumn = 0\r\n            th.addEventListener(\"click\", function () {\r\n                timesClickedColumn += 1\r\n                console.log('clicked')\r\n                function getTableDataOnClick() {\r\n                const tableRows = tableBody.querySelectorAll('tr');\r\n                for (let [i, tr] of tableRows.entries()) {\r\n                    if (tr.querySelectorAll('td').item(columnIndex).innerHTML !== ''){\r\n                    columnData.push(tr.querySelectorAll('td').item(columnIndex).innerHTML+'#'+i)\r\n                    dictOfColumnIndexAndTableRow[tr.querySelectorAll('td').item(columnIndex).innerHTML+'#'+i] = tr.innerHTML\r\n                    } else{\r\n                    // Fill in blank table cells with a value(0), so they can be sorted.\r\n                    columnData.push('0#'+i)\r\n                    dictOfColumnIndexAndTableRow['0#'+i] = tr.innerHTML\r\n                    }\r\n                }\r\n    \r\n                function naturalSortAescending(a,b){\r\n                    return a.localeCompare(b, navigator.languages[0] || navigator.language,\r\n                        {numeric: true, ignorePunctuation: true})\r\n                }\r\n                function naturalSortDescending(a,b){\r\n                    return naturalSortAescending(b,a)\r\n                }\r\n                // Sort naturally; default aescending unless th is using 'order-by-desc' as className.\r\n                console.log(columnData[0])\r\n                //[^A-Za-z0-9s]\r\n    \r\n                if (columnData[0].search(/[^A-Za-z0-9s]/)) {\r\n                    console.log('test1')\r\n                    if (th.className === 'order-by-desc' && timesClickedColumn === 1){\r\n                    columnData.sort(naturalSortDescending,{numeric: true, ignorePunctuation: true})\r\n                    }else if(th.className === 'order-by-desc' && timesClickedColumn === 2){\r\n                    columnData.sort(naturalSortAescending,{numeric: true, ignorePunctuation: true})\r\n                        timesClickedColumn = 0\r\n                    }\r\n                else if (timesClickedColumn === 1){   \r\n                    columnData.sort(naturalSortAescending)         \r\n                } else if (timesClickedColumn === 2){\r\n                    \r\n                    columnData.sort(naturalSortDescending)\r\n                    timesClickedColumn = 0\r\n                    } \r\n                }\r\n                }\r\n                getTableDataOnClick();\r\n                function sortingFunction() {\r\n                const tableRows = tableBody.querySelectorAll('tr');\r\n                for (let [i, tr] of tableRows.entries()) {\r\n               \r\n                    tr.innerHTML = dictOfColumnIndexAndTableRow[columnData[i]]\r\n                }\r\n                columnData.length = 0\r\n                }\r\n                sortingFunction()\r\n            });\r\n            }\r\n        }\r\n        }\r\n    }\r\n    })}\r\n    \r\n    tableSortJs()\r\n`}\r\n    </pre></React.Fragment>\r\n    );\r\n}\r\n\r\nexport default TableSortScript","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import App from './table-sort';\nimport TestTable from './TestTable'\nimport DisplayTableSort from './TableSortScript';\nimport { HashRouter, BrowserRouter ,Route } from \"react-router-dom\";\n\nReactDOM.render(\n\n<BrowserRouter>\n<Route exact path=\"/\" component={TestTable}/>\n<TestTable/>\n\n\n{/* <Route exact path=\"/\" component={DisplayTableSort}>\n<DisplayTableSort/>\n</Route> */}\n</BrowserRouter>,\n  document.getElementById('display')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}