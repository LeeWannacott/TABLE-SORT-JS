{"version":3,"sources":["logo.svg","table-sort.js","serviceWorker.js","TableSortScript.js","index.js"],"names":["module","exports","columnData","dictOfColumnIndexAndTableRow","document","addEventListener","e","getElementsByTagName","sortableTable","className","tableHead","querySelector","tableBody","tableHeadHeaders","querySelectorAll","entries","columnIndex","th","timesClickedColumn","tableRows","i","tr","item","innerHTML","push","console","log","naturalSortAescending","a","b","localeCompare","navigator","languages","language","naturalSortDescending","search","sort","numeric","ignorePunctuation","getTableDataOnClick","length","sortingFunction","Boolean","window","location","hostname","match","unregister","serviceWorker","ready","then","registration","catch","error","message","TableSortScript","Fragment","style","wordWrap","whiteSpace","ReactDOM","render","exact","path","component","DisplayTableSort","getElementById"],"mappings":"uKAAAA,EAAOC,QAAU,IAA0B,kC,wHCCrCC,EAAa,GACbC,EAA+B,GAGrCC,SAASC,iBAAiB,oBAAoB,SAAUC,GAAI,IAAD,gBACjCF,SAASG,qBAAqB,UADG,IAC3D,2BAAkE,CAAC,IAA1DC,EAAyD,QAC9B,eAA5BA,EAAcC,YACbD,EAAcD,qBAAqB,SAG9BC,EAAcD,qBAAqB,SAGvC,WACF,IADC,EACKG,EAAYF,EAAcG,cAAc,SACxCC,EAAYJ,EAAcG,cAAc,SACxCE,EAAmBH,EAAUI,iBAAiB,MAHnD,cAK6BD,EAAiBE,QAAQ,UALtD,kDAKSC,EALT,KAKsBC,EALtB,KAMGC,EAAqB,EACzBD,EAAGZ,iBAAiB,SAAS,WACzBa,GAAsB,EACtB,WACA,IAD+B,EACzBC,EAAYP,EAAUE,iBAAiB,MADd,cAEXK,EAAUJ,WAFC,IAE/B,2BAAyC,CAAC,IAAD,yBAA/BK,EAA+B,KAA5BC,EAA4B,KACyB,KAA1DA,EAAGP,iBAAiB,MAAMQ,KAAKN,GAAaO,WAChDrB,EAAWsB,KAAKH,EAAGP,iBAAiB,MAAMQ,KAAKN,GAAaO,UAAU,IAAIH,GAC1EjB,EAA6BkB,EAAGP,iBAAiB,MAAMQ,KAAKN,GAAaO,UAAU,IAAIH,GAAKC,EAAGE,YAG/FrB,EAAWsB,KAAK,KAAKJ,GACrBjB,EAA6B,KAAKiB,GAAKC,EAAGE,UAC1CE,QAAQC,IAAIvB,KAVe,8BAc/B,SAASwB,EAAsBC,EAAEC,GAE7B,OADAJ,QAAQC,IAAIxB,GACL0B,EAAEE,cAAcD,EAAGE,UAAUC,UAAU,IAAMD,UAAUE,UAElE,SAASC,EAAsBN,EAAEC,GAC7B,OAAOF,EAAsBE,EAAED,GAGnCH,QAAQC,IAAIxB,EAAW,IACnBA,EAAW,GAAGiC,OAAO,kBACA,kBAAjBlB,EAAGR,WAAwD,IAAvBS,EACxChB,EAAWkC,KAAKF,EAAsB,CAACG,SAAS,EAAMC,mBAAmB,IAC/C,kBAAjBrB,EAAGR,WAAwD,IAAvBS,GAC7ChB,EAAWkC,KAAKT,EAAsB,CAACU,SAAS,EAAMC,mBAAmB,IACrEpB,EAAqB,GAEG,IAAvBA,EACLhB,EAAWkC,KAAKT,EAAsB,CAACU,SAAS,EAAMC,mBAAmB,IAC3C,IAAvBpB,IACPhB,EAAWkC,KAAKF,EAAsB,CAACG,SAAS,EAAMC,mBAAmB,IACzEpB,EAAqB,IAIzBqB,GACA,WACA,IAD2B,EACrBpB,EAAYP,EAAUE,iBAAiB,MADlB,cAEPK,EAAUJ,WAFH,IAE3B,2BAAyC,CAAC,IAAD,yBAA/BK,EAA+B,UAClCG,UAAYpB,EAA6BD,EAAWkB,KAHhC,8BAK3BlB,EAAWsC,OAAS,EAEpBC,OAlDJ,2BAAkE,IALjE,+BAAC,GAFFhB,QAAQC,IAAI,uCAHZD,QAAQC,IAAI,yCAJuC,kCCOvCgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAgHC,SAASC,IACV,kBAAmBhB,WACrBA,UAAUiB,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaJ,gBAEdK,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,Y,YCtCbC,MAjGf,WACI,OAAS,kBAAC,IAAMC,SAAP,KAAgB,yBAAKC,MAAO,CAACC,SAAU,aAAcC,WAAY,aAAjD,8sH,eCM7BC,IAASC,OAET,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,OAAOC,UAAWC,IACpC,kBAAC,EAAD,OAEE7D,SAAS8D,eAAe,SAM1BlB,IAMAA,M","file":"static/js/main.89ef49cb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\r\nconst columnData = [];\r\nconst dictOfColumnIndexAndTableRow = {\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function (e) {\r\nfor (let sortableTable of document.getElementsByTagName('table')) {\r\n    if (sortableTable.className === 'table-sort') {\r\n    if (!sortableTable.getElementsByTagName('thead')) {\r\n        console.log('<thead> Tag does not exist in table');\r\n    }\r\n    else if (!sortableTable.getElementsByTagName('tbody')) {\r\n        console.log('<tbody> Tag does not exist in table');\r\n    }\r\n    else {\r\n        const tableHead = sortableTable.querySelector('thead')\r\n        const tableBody = sortableTable.querySelector('tbody')\r\n        const tableHeadHeaders = tableHead.querySelectorAll('th')\r\n        \r\n        for (let [columnIndex, th] of tableHeadHeaders.entries('table')) {\r\n        let timesClickedColumn = 0\r\n        th.addEventListener(\"click\", function () {\r\n            timesClickedColumn += 1\r\n            function getTableDataOnClick() {\r\n            const tableRows = tableBody.querySelectorAll('tr');\r\n            for (let [i, tr] of tableRows.entries()) {\r\n                if (tr.querySelectorAll('td').item(columnIndex).innerHTML !== ''){\r\n                columnData.push(tr.querySelectorAll('td').item(columnIndex).innerHTML+'#'+i)\r\n                dictOfColumnIndexAndTableRow[tr.querySelectorAll('td').item(columnIndex).innerHTML+'#'+i] = tr.innerHTML\r\n                } else{\r\n                // Fill in blank table cells with a value(0), so they can be sorted.\r\n                columnData.push('0#'+i)\r\n                dictOfColumnIndexAndTableRow['0#'+i] = tr.innerHTML\r\n                console.log(dictOfColumnIndexAndTableRow)\r\n                }\r\n            }\r\n\r\n            function naturalSortAescending(a,b){\r\n                console.log(columnData)\r\n                return a.localeCompare(b, navigator.languages[0] || navigator.language)\r\n            }\r\n            function naturalSortDescending(a,b){\r\n                return naturalSortAescending(b,a)\r\n            }\r\n            // Sort naturally; default aescending unless th is using 'order-by-desc' as className.\r\n            console.log(columnData[0])\r\n            if (columnData[0].search(/[^A-Za-z0-9]/)) {\r\n                if (th.className === 'order-by-desc' && timesClickedColumn === 1){\r\n                columnData.sort(naturalSortDescending,{numeric: true, ignorePunctuation: true})\r\n                }else if(th.className === 'order-by-desc' && timesClickedColumn === 2){\r\n                columnData.sort(naturalSortAescending,{numeric: true, ignorePunctuation: true})\r\n                    timesClickedColumn = 0\r\n                }\r\n            else if (timesClickedColumn === 1){     \r\n                columnData.sort(naturalSortAescending,{numeric: true, ignorePunctuation: true})         \r\n            } else if (timesClickedColumn === 2){\r\n                columnData.sort(naturalSortDescending,{numeric: true, ignorePunctuation: true})\r\n                timesClickedColumn = 0\r\n                } \r\n            }\r\n            }\r\n            getTableDataOnClick();\r\n            function sortingFunction() {\r\n            const tableRows = tableBody.querySelectorAll('tr');\r\n            for (let [i, tr] of tableRows.entries()) {\r\n                tr.innerHTML = dictOfColumnIndexAndTableRow[columnData[i]]\r\n            }\r\n            columnData.length = 0\r\n            }\r\n            sortingFunction()\r\n        });\r\n        }\r\n    }\r\n    }\r\n}\r\n})","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Fragment } from 'react';\r\n\r\nfunction TableSortScript() {\r\n    return ( <React.Fragment><pre style={{wordWrap: \"break-word\", whiteSpace: \"pre-wrap\"}}>\r\n        \r\n{`     \r\nconsole.log('hello world')\r\nconst columnData = [];\r\nconst dictOfColumnIndexAndTableRow = {\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function (e) {\r\n    console.log('dom loaded')\r\nfor (let sortableTable of document.getElementsByTagName('table')) {\r\n    if (sortableTable.className === 'table-sort') {\r\n        console.log('table-sort')\r\n    if (!sortableTable.getElementsByTagName('thead')) {\r\n        console.log('<thead> Tag does not exist in table');\r\n    }\r\n    else if (!sortableTable.getElementsByTagName('tbody')) {\r\n        console.log('<tbody> Tag does not exist in table');\r\n    }\r\n    else {\r\n        const tableHead = sortableTable.querySelector('thead')\r\n        const tableBody = sortableTable.querySelector('tbody')\r\n        const tableHeadHeaders = tableHead.querySelectorAll('th')\r\n        \r\n        for (let [columnIndex, th] of tableHeadHeaders.entries('table')) {\r\n            console.log('th')\r\n        let timesClickedColumn = 0\r\n        th.addEventListener(\"click\", function () {\r\n            timesClickedColumn += 1\r\n            console.log('clicked')\r\n            function getTableDataOnClick() {\r\n            const tableRows = tableBody.querySelectorAll('tr');\r\n            for (let [i, tr] of tableRows.entries()) {\r\n                if (tr.querySelectorAll('td').item(columnIndex).innerHTML !== ''){\r\n                columnData.push(tr.querySelectorAll('td').item(columnIndex).innerHTML+'#'+i)\r\n                dictOfColumnIndexAndTableRow[tr.querySelectorAll('td').item(columnIndex).innerHTML+'#'+i] = tr.innerHTML\r\n                } else{\r\n                // Fill in blank table cells with a value(0), so they can be sorted.\r\n                columnData.push('0#'+i)\r\n                dictOfColumnIndexAndTableRow['0#'+i] = tr.innerHTML\r\n                console.log(dictOfColumnIndexAndTableRow)\r\n                }\r\n            }\r\n\r\n            function naturalSortAescending(a,b){\r\n                console.log('sort1')\r\n                return a.localeCompare(b, navigator.languages[0] || navigator.language,\r\n                    {numeric: true, ignorePunctuation: true})\r\n            }\r\n            function naturalSortDescending(a,b){\r\n                console.log('sort2')\r\n                return naturalSortAescending(b,a)\r\n            }\r\n            // Sort naturally; default aescending unless th is using 'order-by-desc' as className.\r\n            console.log(columnData[0])\r\n            //[^A-Za-z0-9\\s]\r\n\r\n            if (columnData[0].search(/[^A-Za-z0-9\\s]/)) {\r\n                console.log('test1')\r\n                if (th.className === 'order-by-desc' && timesClickedColumn === 1){\r\n                columnData.sort(naturalSortDescending,{numeric: true, ignorePunctuation: true})\r\n                }else if(th.className === 'order-by-desc' && timesClickedColumn === 2){\r\n                columnData.sort(naturalSortAescending,{numeric: true, ignorePunctuation: true})\r\n                    timesClickedColumn = 0\r\n                }\r\n            else if (timesClickedColumn === 1){   \r\n                console.log('1')  \r\n                columnData.sort(naturalSortAescending)         \r\n            } else if (timesClickedColumn === 2){\r\n                \r\n                columnData.sort(naturalSortDescending)\r\n                timesClickedColumn = 0\r\n                } \r\n            }\r\n            }\r\n            getTableDataOnClick();\r\n            function sortingFunction() {\r\n            const tableRows = tableBody.querySelectorAll('tr');\r\n            for (let [i, tr] of tableRows.entries()) {\r\n           \r\n                tr.innerHTML = dictOfColumnIndexAndTableRow[columnData[i]]\r\n            }\r\n            columnData.length = 0\r\n            }\r\n            sortingFunction()\r\n        });\r\n        }\r\n    }\r\n    }\r\n}\r\n})\r\n`}\r\n    </pre></React.Fragment>\r\n    );\r\n}\r\n\r\nexport default TableSortScript","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './table-sort';\nimport * as serviceWorker from './serviceWorker';\nimport TestTable from './TestTable'\nimport DisplayTableSort from './TableSortScript';\nimport { HashRouter, BrowserRouter ,Route } from \"react-router-dom\";\n\nReactDOM.render(\n\n<BrowserRouter>\n<Route exact path=\"/.js\" component={DisplayTableSort}/>\n<DisplayTableSort/>\n</BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}